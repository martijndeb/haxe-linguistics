class Array<T : Array.T>{
	public new(method) : Void -> Void

	 = function() = {
		this.__a = __dollar__amake(0);
		this.length = 0;
	};

	__a(var) : neko.NativeArray<Array.T>;

	public length((default,null)) : Int;

	public concat(method) : a : Array<Array.T> -> Array<Array.T>

	 = function(a:Array<Array.T>) = {
		var a1 = this.__a;
		var a2 = a.__a;
		var s1 = this.length;
		var s2 = a.length;
		var a3 = __dollar__amake(s1 + s2);
		__dollar__ablit(a3,0,a1,0,s1);
		__dollar__ablit(a3,s1,a2,0,s2);
		return Array.new1(a3,s1 + s2);
	};

	public copy(method) : Void -> Array<Array.T>

	 = function() = {
		return Array.new1(__dollar__asub(this.__a,0,this.length),this.length);
	};

	public iterator(method) : Void -> Iterator<Array.T>

	 = function() = {
		return {a : this,p : 0,hasNext : function() = {
			return this.p < this.a.length;
		},next : function() = {
			var i = this.a.__a[this.p];
			this.p += 1;
			return i;
		}};
	};

	public insert(method) : pos : Int -> x : Array.T -> Void

	 = function(pos:Int,x:Array.T) = {
		var l = this.length;
		if ((pos < 0)){
			pos = l + pos;
			if ((pos < 0))pos = 0);
		});
		if ((pos > l))pos = l);
		this.__grow(l + 1);
		var a = this.__a;
		__dollar__ablit(a,pos + 1,a,pos,l - pos);
		a[pos] = x;
	};

	public join(method) : sep : String -> String

	 = function(sep:String) = {
		var s = new StringBuf();
		var a = this.__a;
		var max = this.length - 1;
		{
			var _g1 = 0;
			var _g = this.length;
			while ((_g1 < _g)) {
				var p = _g1 ++;
				StringBuf.__add(s.b,a[p]);
				if ((p != max))StringBuf.__add(s.b,sep));
			};
		};
		return new String(StringBuf.__to_string(s.b));
	};

	public toString(method) : Void -> String

	 = function() = {
		var s = new StringBuf();
		StringBuf.__add(s.b,"[");
		var it = this.iterator();
		for (i in it) {
			StringBuf.__add(s.b,i);
			if ((it.hasNext()))StringBuf.__add_char(s.b,44));
		};
		StringBuf.__add(s.b,"]");
		return new String(StringBuf.__to_string(s.b));
	};

	public pop(method) : Void -> Null<Array.T>

	 = function() = {
		if ((this.length == 0))return null);
		this.length -= 1;
		var x = this.__a[this.length];
		this.__a[this.length] = null;
		return x;
	};

	public push(method) : x : Array.T -> Int

	 = function(x:Array.T) = {
		var l = this.length;
		this.__grow(l + 1);
		this.__a[l] = x;
		return l + 1;
	};

	public unshift(method) : x : Array.T -> Void

	 = function(x:Array.T) = {
		var l = this.length;
		this.__grow(l + 1);
		var a = this.__a;
		__dollar__ablit(a,1,a,0,l);
		a[0] = x;
	};

	public remove(method) : x : Array.T -> Bool

	 = function(x:Array.T) = {
		var i = 0;
		var l = this.length;
		var a = this.__a;
		while ((i < l)) {
			if ((a[i] == x)){
				__dollar__ablit(a,i,a,i + 1,l - i - 1);
				l -= 1;
				this.length = l;
				a[l] = null;
				return true;
			});
			i += 1;
		};
		return false;
	};

	public indexOf(method) : x : Array.T -> ?fromIndex : Int -> Int

	 = function(x:Array.T,fromIndex:Int = null) = {
		var len = this.length;
		var i;
		if ((fromIndex != null))i = fromIndex else i = 0);
		var a = this.__a;
		if ((i < 0)){
			i += len;
			if ((i < 0))i = 0);
		});
		while ((i < len)) {
			if ((a[i] == x))return i);
			i ++;
		};
		return -1;
	};

	public lastIndexOf(method) : x : Array.T -> ?fromIndex : Int -> Int

	 = function(x:Array.T,fromIndex:Int = null) = {
		var len = this.length;
		var i;
		if ((fromIndex != null))i = fromIndex else i = len - 1);
		var a = this.__a;
		if ((i >= len))i = len - 1 else if ((i < 0))i += len));
		while ((i >= 0)) {
			if ((a[i] == x))return i);
			i --;
		};
		return -1;
	};

	public reverse(method) : Void -> Void

	 = function() = {
		var i = 0;
		var l = this.length;
		var a = this.__a;
		var half = l >> 1;
		l -= 1;
		while ((i < half)) {
			var tmp = a[i];
			a[i] = a[l - i];
			a[l - i] = tmp;
			i += 1;
		};
	};

	public shift(method) : Void -> Null<Array.T>

	 = function() = {
		var l = this.length;
		if ((l == 0))return null);
		var a = this.__a;
		var x = a[0];
		l -= 1;
		__dollar__ablit(a,0,a,1,l);
		a[l] = null;
		this.length = l;
		return x;
	};

	public slice(method) : pos : Int -> ?end : Int -> Array<Array.T>

	 = function(pos:Int,end:Int = null) = {
		if ((pos < 0)){
			pos = this.length + pos;
			if ((pos < 0))pos = 0);
		});
		if ((end == null))end = this.length else if ((end < 0))end = this.length + end));
		if ((end > this.length))end = this.length);
		var len = end - pos;
		if ((len < 0))return new Array());
		return Array.new1(__dollar__asub(this.__a,pos,len),len);
	};

	public sort(method) : f : (Array.T -> Array.T -> Int) -> Void

	 = function(f:Array.T -> Array.T -> Int) = {
		var a = this.__a;
		var i = 0;
		var l = this.length;
		while ((i < l)) {
			var swap = false;
			var j = 0;
			var max = l - i - 1;
			while ((j < max)) {
				if ((f(a[j],a[j + 1]) > 0)){
					var tmp = a[j + 1];
					a[j + 1] = a[j];
					a[j] = tmp;
					swap = true;
				});
				j += 1;
			};
			if ((! swap))break);
			i += 1;
		};
	};

	public splice(method) : pos : Int -> len : Int -> Array<Array.T>

	 = function(pos:Int,len:Int) = {
		if ((len < 0))return new Array());
		if ((pos < 0)){
			pos = this.length + pos;
			if ((pos < 0))pos = 0);
		});
		if ((pos > this.length)){
			pos = 0;
			len = 0;
		} else if ((pos + len > this.length)){
			len = this.length - pos;
			if ((len < 0))len = 0);
		}));
		var a = this.__a;
		var ret = Array.new1(__dollar__asub(a,pos,len),len);
		var end = pos + len;
		__dollar__ablit(a,pos,a,end,this.length - end);
		this.length -= len;
		while ((-- len >= 0)) a[this.length + len] = null;
		return ret;
	};

	public map<S : map.S>(method) : f : (Array.T -> map.S) -> Array<map.S>

	 = function(f:Array.T -> map.S) = {
		var ret = [];
		{
			var _g = 0;
			var _g1 = this;
			while ((_g < _g1.length)) {
				var elt = _g1[_g];
				++ _g;
				ret.push(f(elt));
			};
		};
		return ret;
	};

	public filter(method) : f : (Array.T -> Bool) -> Array<Array.T>

	 = function(f:Array.T -> Bool) = {
		var ret = [];
		{
			var _g = 0;
			var _g1 = this;
			while ((_g < _g1.length)) {
				var elt = _g1[_g];
				++ _g;
				if ((f(elt)))ret.push(elt));
			};
		};
		return ret;
	};

	__get(method) : pos : Int -> Array.T

	 = function(pos:Int) = {
		return this.__a[pos];
	};

	__set(method) : pos : Int -> v : Array.T -> Array.T

	 = function(pos:Int,v:Array.T) = {
		var a = this.__a;
		if ((this.length <= pos)){
			var l = pos + 1;
			var dlen = l - __dollar__asize(a);
			if ((dlen > 0)){
				if ((dlen == 1)){
					this.__grow(l);
					a = this.__a;
				} else {
					a = __dollar__amake(l);
					__dollar__ablit(a,0,this.__a,0,this.length);
					this.__a = a;
				});
			});
			this.length = l;
		});
		a[pos] = v;
		return v;
	};

	__grow(method) : l : Int -> Void

	 = function(l:Int) = {
		var a = this.__a;
		var sz = __dollar__asize(a);
		if ((sz >= l)){
			this.length = l;
			return;
		});
		var big = sz * 3 >> 1;
		if ((big < l))big = l);
		var a2 = __dollar__amake(big);
		__dollar__ablit(a2,0,a,0,this.length);
		this.__a = a2;
		this.length = l;
	};

	__neko(method) : Void -> neko.NativeArray<Array.T>

	 = function() = {
		var a = this.__a;
		var sz = __dollar__asize(a);
		if ((sz != this.length)){
			a = __dollar__asub(a,0,this.length);
			this.__a = a;
		});
		return a;
	};

	static new1<T : new1.T>(method) : a : neko.NativeArray<new1.T> -> l : Int -> Array<new1.T>

	 = function(a:neko.NativeArray<new1.T>,l:Int) = {
		var inst = new Array();
		inst.__a = a;
		inst.length = l;
		return inst;
	};

}