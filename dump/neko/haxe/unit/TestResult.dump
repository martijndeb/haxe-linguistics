class haxe.unit.TestResult{
	public new(method) : Void -> Void

	 = function() = {
		this.m_tests = new List();
		this.success = true;
	};

	m_tests(var) : List<haxe.unit.TestStatus>;

	public success((default,null)) : Bool;

	public add(method) : t : haxe.unit.TestStatus -> Void

	 = function(t:haxe.unit.TestStatus) = {
		this.m_tests.add(t);
		if ((! t.success))this.success = false);
	};

	public toString(method) : Void -> String

	 = function() = {
		var buf = new StringBuf();
		var failures = 0;
		for (test in this.m_tests.iterator()) if ((test.success == false)){
			StringBuf.__add(buf.b,"* ");
			StringBuf.__add(buf.b,test.classname);
			StringBuf.__add(buf.b,"::");
			StringBuf.__add(buf.b,test.method);
			StringBuf.__add(buf.b,"()");
			StringBuf.__add(buf.b,"\n");
			StringBuf.__add(buf.b,"ERR: ");
			if ((test.posInfos != null)){
				StringBuf.__add(buf.b,test.posInfos.fileName);
				StringBuf.__add(buf.b,":");
				StringBuf.__add(buf.b,test.posInfos.lineNumber);
				StringBuf.__add(buf.b,"(");
				StringBuf.__add(buf.b,test.posInfos.className);
				StringBuf.__add(buf.b,".");
				StringBuf.__add(buf.b,test.posInfos.methodName);
				StringBuf.__add(buf.b,") - ");
			});
			StringBuf.__add(buf.b,test.error);
			StringBuf.__add(buf.b,"\n");
			if ((test.backtrace != null)){
				StringBuf.__add(buf.b,test.backtrace);
				StringBuf.__add(buf.b,"\n");
			});
			StringBuf.__add(buf.b,"\n");
			failures ++;
		});
		StringBuf.__add(buf.b,"\n");
		if ((failures == 0))StringBuf.__add(buf.b,"OK ") else StringBuf.__add(buf.b,"FAILED "));
		StringBuf.__add(buf.b,this.m_tests.length);
		StringBuf.__add(buf.b," tests, ");
		StringBuf.__add(buf.b,failures);
		StringBuf.__add(buf.b," failed, ");
		StringBuf.__add(buf.b,this.m_tests.length - failures);
		StringBuf.__add(buf.b," success");
		StringBuf.__add(buf.b,"\n");
		return new String(StringBuf.__to_string(buf.b));
	};

}