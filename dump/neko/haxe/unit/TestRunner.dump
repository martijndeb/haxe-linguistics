class haxe.unit.TestRunner{
	public new(method) : Void -> Void

	 = function() = {
		this.result = new haxe.unit.TestResult();
		this.cases = new List();
	};

	public result((default,null)) : haxe.unit.TestResult;

	cases(var) : List<haxe.unit.TestCase>;

	public add(method) : c : haxe.unit.TestCase -> Void

	 = function(c:haxe.unit.TestCase) = {
		this.cases.add(c);
	};

	public run(method) : Void -> Bool

	 = function() = {
		this.result = new haxe.unit.TestResult();
		for (c in this.cases.iterator()) this.runCase(c);
		haxe.unit.TestRunner.print(this.result.toString());
		return this.result.success;
	};

	runCase(method) : t : haxe.unit.TestCase -> Void

	 = function(t:haxe.unit.TestCase) = {
		var old = haxe.Log.trace;
		haxe.Log.trace = haxe.unit.TestRunner.customTrace;
		var cl = Type.getClass(t);
		var fields = Type.getInstanceFields(cl);
		haxe.unit.TestRunner.print("Class: " + Type.getClassName(cl) + " ");
		{
			var _g = 0;
			while ((_g < fields.length)) {
				var f = fields[_g];
				++ _g;
				var fname = f;
				var field;
				if (($typeof(t) != $tobject))field = null else field = $objget(t,$fasthash(f.__s)));
				if ((StringTools.startsWith(fname,"test") && Reflect.isFunction(field))){
					t.currentTest = new haxe.unit.TestStatus();
					t.currentTest.classname = Type.getClassName(cl);
					t.currentTest.method = fname;
					t.setup();
					try {
						Reflect.callMethod(t,field,new Array());
						if ((t.currentTest.done)){
							t.currentTest.success = true;
							haxe.unit.TestRunner.print(".");
						} else {
							t.currentTest.success = false;
							t.currentTest.error = "(warning) no assert";
							haxe.unit.TestRunner.print("W");
						});
					}catch( e : haxe.unit.TestStatus ) {
						haxe.unit.TestRunner.print("F");
						t.currentTest.backtrace = haxe.CallStack.toString(haxe.CallStack.exceptionStack());
					},catch( e : Dynamic ) {
						haxe.unit.TestRunner.print("E");
						t.currentTest.error = "exception thrown : " + Std.string(e);
						t.currentTest.backtrace = haxe.CallStack.toString(haxe.CallStack.exceptionStack());
					};
					this.result.add(t.currentTest);
					t.tearDown();
				});
			};
		};
		haxe.unit.TestRunner.print("\n");
		haxe.Log.trace = old;
	};

	static public print(dynamic method) : v : Dynamic -> Void

	 = function(v:Dynamic) = {
		__dollar__print(v);
	};

	static customTrace(method) : v : Unknown<14> -> ?p : haxe.PosInfos -> Void

	 = function(v:Unknown<14>,p:haxe.PosInfos = null) = {
		haxe.unit.TestRunner.print(p.fileName + ":" + p.lineNumber + ": " + Std.string(v) + "\n");
	};

}