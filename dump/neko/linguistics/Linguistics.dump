class linguistics.Linguistics{
	public new(method) : Void -> Void

	 = function() = {
		if ((linguistics.Linguistics.instance == null))linguistics.Linguistics.instance = this);
	};

	language(var) : linguistics.languages.ILanguage;

	public setLanguage(method) : ?myLanguage : Class<linguistics.languages.ILanguage> -> Void

	 = function(myLanguage:Class<linguistics.languages.ILanguage> = null) = {
		if ((myLanguage == null))this.language = new linguistics.languages.English() else this.language = Type.createInstance(myLanguage,[]));
		this.language.createTokens();
	};

	public getLanguage(method) : Void -> linguistics.languages.ILanguage

	 = function() = {
		return this.language;
	};

	public getBasicTokenizer(method) : Void -> linguistics.tokenizers.ITokenizer

	 = function() = {
		return Type.createInstance(this.language.basicTokenizer,[]);
	};

	public getLengthBasedTokenizer(method) : ?length : Unknown<15> -> linguistics.tokenizers.ITokenizer

	 = function(length:Unknown<15> = null) = {
		return Type.createInstance(this.language.lengthBasedTokenizer,[length]);
	};

	public getToken(method) : myTokenString : String -> ?myDocumentIndex : Int -> ?myRelativeIndex : Int -> linguistics.tokenizers.tokens.IToken

	 = function(myTokenString:String,myDocumentIndex:Int = null,myRelativeIndex:Int = null) = {
		return Type.createInstance(this.language.token,[myTokenString,myDocumentIndex,myRelativeIndex]);
	};

	public getBasicStemmer(method) : Void -> linguistics.stemmers.IStemmer

	 = function() = {
		return Type.createInstance(this.language.basicStemmer,[]);
	};

	static instance(var) : linguistics.Linguistics;

	static public getInstance(method) : Void -> linguistics.Linguistics

	 = function() = {
		if ((linguistics.Linguistics.instance == null)){
			linguistics.Linguistics.instance = new linguistics.Linguistics();
			linguistics.Linguistics.instance.setLanguage(null);
		});
		return linguistics.Linguistics.instance;
	};

	static public getSupportedLanguages(method) : Void -> Array<String>

	 = function() = {
		var languageNames = [];
		var languagesList = linguistics.Linguistics.getSupportedLanguageClasses();
		{
			var _g = 0;
			while ((_g < languagesList.length)) {
				var language = languagesList[_g];
				++ _g;
				var languageInstance = Type.createInstance(language,[]);
				languageNames.push(languageInstance.name);
				languageInstance = null;
			};
		};
		return languageNames;
	};

	static public getSupportedLanguageClasses(method) : Void -> Array<Class<linguistics.languages.ILanguage>>

	 = function() = {
		return [linguistics.languages.Dutch,linguistics.languages.English,linguistics.languages.Frisian,linguistics.languages.German];
	};

}