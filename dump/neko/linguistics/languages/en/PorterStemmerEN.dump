class linguistics.languages.en.PorterStemmerEN implements linguistics.stemmers.IStemmer{
	public new(method) : Void -> Void

	 = function() = {
		this.li_endings = ["c","d","e","g","h","k","m","n","r","t"];
		this.doubles = ["bb","dd","ff","gg","mm","nn","pp","rr","tt"];
		this.vowels = ["a","e","i","o","u","y"];
	};

	vowels(var) : Array<String>;

	doubles(var) : Array<String>;

	li_endings(var) : Array<String>;

	public stem(method) : myString : String -> String

	 = function(myString:String) = {
		var stem = StringTools.trim(myString);
		if ((stem.length < 3))return stem);
		stem = stem.toLowerCase();
		var consonants = new linguistics.stemmers.ConsonantsMarker(this.vowels);
		var regions = new linguistics.stemmers.Region12(this.vowels);
		stem = consonants.mark(stem);
		var R1 = regions.getRegion1(stem);
		var R2 = regions.getRegion2(stem,R1);
		stem = this.step0(stem);
		R1 = regions.getRegion1(stem);
		R2 = regions.getRegion2(stem,R1);
		stem = this.step1a(stem);
		R1 = regions.getRegion1(stem);
		R2 = regions.getRegion2(stem,R1);
		stem = this.step1b(stem,R1);
		R1 = regions.getRegion1(stem);
		R2 = regions.getRegion2(stem,R1);
		stem = this.step1c(stem);
		R1 = regions.getRegion1(stem);
		R2 = regions.getRegion2(stem,R1);
		stem = this.step2(stem,R1);
		R1 = regions.getRegion1(stem);
		R2 = regions.getRegion2(stem,R1);
		stem = this.step3(stem,R1,R2);
		R1 = regions.getRegion1(stem);
		R2 = regions.getRegion2(stem,R1);
		stem = this.step4(stem,R2);
		R1 = regions.getRegion1(stem);
		R2 = regions.getRegion2(stem,R1);
		stem = this.step5(stem,R1,R2);
		R1 = regions.getRegion1(stem);
		R2 = regions.getRegion2(stem,R1);
		return stem;
	};

	step0(method) : myString : String -> String

	 = function(myString:String) = {
		var stem = myString;
		if ((StringTools.endsWith(stem,"'s'")))stem = stem.substr(0,stem.length - 3));
		if ((StringTools.endsWith(stem,"'s")))stem = stem.substr(0,stem.length - 2));
		if ((StringTools.endsWith(stem,"'")))stem = stem.substr(0,stem.length - 1));
		return stem;
	};

	step1a(method) : myString : String -> String

	 = function(myString:String) = {
		var stem = myString;
		if ((StringTools.endsWith(stem,"sses")))stem = stem.substr(0,-4) + "ss" else if ((StringTools.endsWith(stem,"ies") || StringTools.endsWith(stem,"ied"))){
			var tempStem = stem.substr(0,-3);
			if ((tempStem.length > 1 && this.vowels.indexOf(tempStem.substr(tempStem.length,-1),null) == -1 && this.vowels.indexOf(tempStem.substr(tempStem.length,-2),null) == -1))stem = tempStem + "i" else if ((tempStem.length > 0))stem = tempStem + "ie"));
		} else if ((StringTools.endsWith(stem,"es") || StringTools.endsWith(stem,"ss")))return stem else if ((StringTools.endsWith(stem,"s") && this.vowels.indexOf(stem.substr(stem.length - 2,1),null) < 0))stem = stem.substr(0,-1)))));
		return stem;
	};

	step1b(method) : myString : String -> R1 : String -> String

	 = function(myString:String,R1:String) = {
		var stem = myString;
		if ((StringTools.endsWith(R1,"eed")))stem = stem.substr(0,-1) else if ((StringTools.endsWith(R1,"eedly")))stem = stem.substr(0,-3) else if ((StringTools.endsWith(stem,"ed") || StringTools.endsWith(stem,"edly") || StringTools.endsWith(stem,"ing") || StringTools.endsWith(stem,"ingly"))){
			var rem = -2;
			if ((StringTools.endsWith(stem,"ing")))rem = -3 else if ((StringTools.endsWith(stem,"edly")))rem = -4 else if ((StringTools.endsWith(stem,"ingly")))rem = -5)));
			var tempStem = stem.substr(0,rem);
			if ((this.vowels.indexOf(stem.substr(stem.length - 1,1),null) > -1 || this.vowels.indexOf(stem.substr(stem.length - 2,1),null) > -1 || this.vowels.indexOf(stem.substr(stem.length - 3,1),null) > -1)){
				stem = tempStem;
				if ((StringTools.endsWith(stem,"at") || StringTools.endsWith(stem,"bl") || StringTools.endsWith(stem,"iz")))stem = stem + "e");
				if ((this.doubles.indexOf(stem.substr(stem.length - 2,2),null) > -1))stem = stem.substr(0,-1));
			});
		})));
		return stem;
	};

	step1c(method) : myString : String -> String

	 = function(myString:String) = {
		var stem = myString;
		if ((stem.length > 2 && this.vowels.indexOf(stem.substr(stem.length - 2,1),null) < 0 && stem.toLowerCase().substr(stem.length - 1,null) == "y"))stem = stem.substr(0,-1) + "i");
		return stem;
	};

	step2(method) : myString : String -> R1 : String -> String

	 = function(myString:String,R1:String) = {
		var stem = myString;
		if ((StringTools.endsWith(stem,"fulness")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"fulness","ful") else if ((StringTools.endsWith(stem,"ousness")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ousness","ous") else if ((StringTools.endsWith(stem,"iveness")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"iveness","ive") else if ((StringTools.endsWith(stem,"ization")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ization","ize") else if ((StringTools.endsWith(stem,"ational")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ational","ate") else if ((StringTools.endsWith(stem,"tional")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"tional","tion") else if ((StringTools.endsWith(stem,"biliti")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"biliti","ble") else if ((StringTools.endsWith(stem,"lessli")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"lessli","less") else if ((StringTools.endsWith(stem,"fulli")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"fulli","ful") else if ((StringTools.endsWith(stem,"ousli")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ousli","ous") else if ((StringTools.endsWith(stem,"iviti")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"iviti","ive") else if ((StringTools.endsWith(stem,"entli")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"entli","ent") else if ((StringTools.endsWith(stem,"ation")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ation","ate") else if ((StringTools.endsWith(stem,"alism")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"alism","al") else if ((StringTools.endsWith(stem,"aliti")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"aliti","al") else if ((StringTools.endsWith(stem,"enci")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"enci","ence") else if ((StringTools.endsWith(stem,"anci")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"anci","ance") else if ((StringTools.endsWith(stem,"abli")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"abli","able") else if ((StringTools.endsWith(stem,"izer")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"izer","ize") else if ((StringTools.endsWith(stem,"ator")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ator","ate") else if ((StringTools.endsWith(stem,"alli")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"alli","al") else if ((StringTools.endsWith(stem,"bli")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"bli","ble") else if ((StringTools.endsWith(R1,"ogi") && stem.substr(stem.length - 3,1) == "l"))stem = stem.substr(0,-3) + "og" else if ((StringTools.endsWith(R1,"li") && this.li_endings.indexOf(stem.substr(stem.length - 3,1),null) > -1))stem = stem.substr(0,-3)))))))))))))))))))))))));
		return stem;
	};

	step3(method) : myString : String -> R1 : String -> R2 : String -> String

	 = function(myString:String,R1:String,R2:String) = {
		var stem = myString;
		if ((R1.indexOf("ational",null) > -1))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ational","ate") else if ((R1.indexOf("tional",null) > -1))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"tional","tion") else if ((R1.indexOf("alize",null) > -1))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"alize","al") else if ((R1.indexOf("icate",null) > -1))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"icate","ic") else if ((R1.indexOf("iciti",null) > -1))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"iciti","ic") else if ((R1.indexOf("ical",null) > -1))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ical","ic") else if ((R1.indexOf("full",null) > -1))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"full","") else if ((R1.indexOf("ness",null) > -1))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ness","") else if ((R1.indexOf("ative",null) > -1 && R2.indexOf("ative",null) > -1))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ative",""))))))))));
		return stem;
	};

	step4(method) : myString : String -> R2 : String -> String

	 = function(myString:String,R2:String) = {
		var stem = myString;
		if ((StringTools.endsWith(R2,"ement")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ement","") else if ((StringTools.endsWith(R2,"ance")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ance","") else if ((StringTools.endsWith(R2,"ence")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ence","") else if ((StringTools.endsWith(R2,"able")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"able","") else if ((StringTools.endsWith(R2,"ible")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ible","") else if ((StringTools.endsWith(R2,"ment")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ment","") else if ((StringTools.endsWith(R2,"ant")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ant","") else if ((StringTools.endsWith(R2,"ent")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ent","") else if ((StringTools.endsWith(R2,"ism")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ism","") else if ((StringTools.endsWith(R2,"ate")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ate","") else if ((StringTools.endsWith(R2,"iti")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"iti","") else if ((StringTools.endsWith(R2,"ous")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ous","") else if ((StringTools.endsWith(R2,"ive")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ive","") else if ((StringTools.endsWith(R2,"ize")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ize","") else if ((StringTools.endsWith(R2,"al")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"al","") else if ((StringTools.endsWith(R2,"er")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"er","") else if ((StringTools.endsWith(R2,"ic")))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"ic",""))))))))))))))))));
		return stem;
	};

	step5(method) : myString : String -> R1 : String -> R2 : String -> String

	 = function(myString:String,R1:String,R2:String) = {
		var stem = myString;
		var lIndex = R2.lastIndexOf("l",null);
		if ((lIndex > -1 && StringTools.endsWith(stem.substr(0,- R2.length),"l") == true))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"l",""));
		var tempString = "";
		var eIndex = R2.lastIndexOf("e",null);
		if ((eIndex > -1))tempString = stem.substr(0,- (R2.length - eIndex)));
		if ((tempString != "" && this.isShortSyllable(tempString.substr(tempString.length - 3,null)) == false))stem = linguistics.utils.StringUtility.replaceLastOccurance(stem,"e",""));
		return stem;
	};

	isShortSyllable(method) : myString : String -> Bool

	 = function(myString:String) = {
		if ((myString.length == 3)){
			var chr1 = myString.substr(0,1);
			var chr2 = myString.substr(1,1);
			var chr3 = myString.substr(2,1);
			if ((this.vowels.indexOf(chr3,null) < 0 && chr3 != "w" && chr3 != "x" && chr3 != "y" && this.vowels.indexOf(chr2,null) > -1 && this.vowels.indexOf(chr1,null) < 0))return true);
		});
		return false;
	};

}